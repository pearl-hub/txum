#!/usr/bin/env bash

set -e

[ -z "$PEARL_ROOT" ] && { echo "Error: The variable PEARL_ROOT must be specified in order to run this script."; exit 1; }
[ -d "$PEARL_ROOT" ] || { echo "Error: The value in variable PEARL_ROOT is not a directory."; exit 2; }

source $PEARL_ROOT/lib/utils/osx-compat.sh
# Update PATH for OSX
pearl_update_path
source "${PEARL_ROOT}/lib/utils/utils.sh"

CMD_ROOT="${CMD_ROOT:-$(readlink -f $(dirname $(readlink -f "$0"))/..)}"

source "${CMD_ROOT}/lib/core.sh"

CMD=txum
DESCRIPTION="A wrapper that enhances Tmux capabilities."

#######################################
# Provide the usage information.
#
# Globals:
#   CMD (RO)          :  The name of the program.
#   DESCRIPTION (RO)  :  The description of the program.
#   CMD_ROOT (RO)     :  The location of the program.
# Arguments:
#   None
# Returns:
#   0
# Output:
#   The usage helper.
#######################################
usage() {
    echo -e "$CMD: $DESCRIPTION"
    echo -e "Usage: $CMD <command> [args]"
    echo
    echo -e "Commands:"
    echo -e "  g[o] alias               Create/Open a Tmux session"
    echo -e "                           and cd to the directory specified by alias."
    echo -e "  h[elp], [-h], [--help]   Show this help message."
    echo
    return 0
}

#######################################
# Parse the command input.
#
# Globals:
#   COMMAND_GO (WO,bool)     :  true if the command has been specified.
#   OPT_HELP (WO,bool)        :  true if the command has been specified.
#   ARGS (WO)                 :  the non positional arguments.
#   COMMAND_ARGS (WO)         :  the command arguments.
# Arguments:
#   opts ($@)                 :  the program arguments.
# Returns:
#   0                         : Parsing succeeded.
#   1                         : Parsing did not succeed.
# Output:
#   The error message in case parsing will not succeed.
#######################################
function parse_arguments(){
    COMMAND_GO=false
    OPT_HELP=false
    COMMAND_ARGS=""

    for opt in "$@"
    do
    case "$opt" in
        go|g)
        COMMAND_GO=true; shift ; COMMAND_ARGS="$1" ; shift ;;
        help|h|-h|--help) OPT_HELP=true ; shift ;;
        --) shift ; break ;;
        -*) die "Invalid option $1" ;;
        *) break ;;
    esac
    done

    ARGS=()
    for arg in "$@"
    do
    ARGS+=("$arg")
    done
}

#######################################
# Check if the option provided to the command
# are correct.
#
# Globals:
#   COMMAND_GO (RO,bool)     :  true if the command has been specified.
#   OPT_HELP (RO,bool)        :  true if the command has been specified.
#   ARGS (RO)                 :  the non positional arguments.
#   COMMAND_ARGS (RO)         :  the command arguments.
# Arguments:
#   None
# Returns:
#   0                         : Checks succeeded.
#   1                         : Checks did not succeed.
# Output:
#   The error message in case checks will not succeed.
#######################################
check_cli(){
    if $COMMAND_GO && $OPT_HELP
    then
        die "Multiple commands are not allowed. Run: $CMD --help"
    fi
    if ! $COMMAND_GO && ! $OPT_HELP
    then
        die "At least one command is required. Run: $CMD --help"
    fi
    if [ "$ARGS" != "" ]
    then
        die "No arguments are needed. Run: $CMD --help"
    fi
    return 0
}

#######################################
# Execute the specified command.
#
# Globals:
#   COMMAND_GO (RO,bool)     :  true if the command has been specified.
#   OPT_HELP (RO,bool)        :  true if the command has been specified.
#   ARGS (RO)                 :  the non positional arguments.
#   COMMAND_ARGS (RO)         :  the command arguments.
# Arguments:
#   None
# Returns:
#   Depends on the command specified.
# Output:
#   Depends on the command specified.
#######################################
function execute_operation(){
    $OPT_HELP && usage && return

    if $COMMAND_GO; then
        go_command "${COMMAND_ARGS}"
    fi
    return 0
}

parse_arguments "$@"
check_cli
execute_operation
# vim: set ts=4 sw=4 noet:
