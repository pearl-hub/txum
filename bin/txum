#!/usr/bin/env bash

set -e

# PATH needs to be updated since GNU Coreutils is required in OSX
# environments. Buava `osx_update_path` cannot be used because in
# order to load osx-compat.sh file the `readlink` command is
# required first (circular dependency).
GNUBIN="/usr/local/opt/coreutils/libexec/gnubin"
[ -d "$GNUBIN" ] && PATH="$GNUBIN:$PATH"

# Identify the location of the current package
PKG_ROOT="${PKG_ROOT:-$(readlink -f $(dirname $(readlink -f "$0"))/..)}"

# Import buava library if needed during the script logic
source $PKG_ROOT/buava/lib/utils.sh

source "${PKG_ROOT}/lib/core.sh"

CMD=txum
DESCRIPTION="A wrapper that enhances Tmux capabilities. Create/Open a Tmux session and cd to the directory specified by alias."

#######################################
# Provide the usage information.
#
# Globals:
#   CMD (RO)          :  The name of the program.
#   DESCRIPTION (RO)  :  The description of the program.
# Arguments:
#   None
# Returns:
#   0
# Output:
#   The usage helper.
#######################################
usage() {
    echo -e "$CMD: $DESCRIPTION"
    echo -e "Usage: $CMD alias"
    echo
    echo -e "Options:"
    echo -e "  -h, --help   Show this help message."
    echo
    return 0
}

#######################################
# Parse the command input.
#
# Globals:
#   OPT_HELP (WO,bool)        :  true if the command has been specified.
#   ARGS (WO)                 :  the non positional arguments.
# Arguments:
#   opts ($@)                 :  the program arguments.
# Returns:
#   0                         : Parsing succeeded.
#   1                         : Parsing did not succeed.
# Output:
#   The error message in case parsing will not succeed.
#######################################
function parse_arguments(){
    OPT_HELP=false

    for opt in "$@"
    do
    case "$opt" in
        -h|--help) OPT_HELP=true ; shift ;;
        --) shift ; break ;;
        -*) die "Invalid option $1" ;;
        *) break ;;
    esac
    done

    ARGS=()
    for arg in "$@"
    do
    ARGS+=("$arg")
    done
}

#######################################
# Check if the option provided to the command
# are correct.
#
# Globals:
#   OPT_HELP (RO,bool)        :  true if the command has been specified.
#   ARGS (RO)                 :  the non positional arguments.
# Arguments:
#   None
# Returns:
#   0                         : Checks succeeded.
#   1                         : Checks did not succeed.
# Output:
#   The error message in case checks will not succeed.
#######################################
check_cli(){
    if [ "$ARGS" != "" ] && $OPT_HELP
    then
        die "No arguments are needed with --help option. Run: $CMD --help"
    fi
    if [[ ${#ARGS[@]} -ne 1 ]] && ! $OPT_HELP
    then
        die "Only one alias is allowed. Run: $CMD --help"
    fi
    return 0
}

#######################################
# Execute the specified command.
#
# Globals:
#   OPT_HELP (RO,bool)        :  true if the command has been specified.
#   ARGS (RO)                 :  the non positional arguments.
# Arguments:
#   None
# Returns:
#   Depends on the command specified.
# Output:
#   Depends on the command specified.
#######################################
function execute_operation(){
    $OPT_HELP && usage && return

    go_command "${ARGS[@]}"
    return 0
}

parse_arguments "$@"
check_cli
execute_operation
# vim: set ts=4 sw=4 noet:
